/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    occasions: Occasion;
    locations: Location;
    persons: Person;
    'image-tags': ImageTag;
    albums: Album;
    comments: Comment;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    occasions: OccasionsSelect<false> | OccasionsSelect<true>;
    locations: LocationsSelect<false> | LocationsSelect<true>;
    persons: PersonsSelect<false> | PersonsSelect<true>;
    'image-tags': ImageTagsSelect<false> | ImageTagsSelect<true>;
    albums: AlbumsSelect<false> | AlbumsSelect<true>;
    comments: CommentsSelect<false> | CommentsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  displayName: string;
  /**
   * User role determines access level
   */
  role: 'user' | 'admin';
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  mediaId: string;
  alt?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    card?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "occasions".
 */
export interface Occasion {
  id: string;
  name: string;
  slug?: string | null;
  shortDescription?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "locations".
 */
export interface Location {
  id: string;
  name: string;
  slug?: string | null;
  shortDescription: string;
  city: string;
  state:
    | 'Andaman and Nicobar Islands'
    | 'Andhra Pradesh'
    | 'Arunachal Pradesh'
    | 'Assam'
    | 'Bihar'
    | 'Chandigarh'
    | 'Chhattisgarh'
    | 'Dadra and Nagar Haveli'
    | 'Daman and Diu'
    | 'Delhi'
    | 'Goa'
    | 'Gujarat'
    | 'Haryana'
    | 'Himachal Pradesh'
    | 'Jammu and Kashmir'
    | 'Jharkhand'
    | 'Karnataka'
    | 'Kerala'
    | 'Ladakh'
    | 'Lakshadweep'
    | 'Madhya Pradesh'
    | 'Maharashtra'
    | 'Manipur'
    | 'Meghalaya'
    | 'Mizoram'
    | 'Nagaland'
    | 'Odisha'
    | 'Puducherry'
    | 'Punjab'
    | 'Rajasthan'
    | 'Sikkim'
    | 'Tamil Nadu'
    | 'Telangana'
    | 'Tripura'
    | 'Uttar Pradesh'
    | 'Uttarakhand'
    | 'West Bengal';
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "persons".
 */
export interface Person {
  id: string;
  name: string;
  slug?: string | null;
  shortDescription?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "image-tags".
 */
export interface ImageTag {
  id: string;
  whenType?: ('' | 'full_date' | 'decades' | 'year' | 'month_year') | null;
  whenValue?: string | null;
  whenValueConfidence?: ('1' | '2' | '3' | '4' | '5') | null;
  mediaId: string | Media;
  personTags?:
    | {
        personId: string | Person;
        confidence?: ('1' | '2' | '3' | '4' | '5') | null;
        coordinates: {
          x: number;
          y: number;
        };
        createdBy: string | User;
        id?: string | null;
      }[]
    | null;
  location?: (string | null) | Location;
  locationConfidence?: ('1' | '2' | '3' | '4' | '5') | null;
  occasion?: (string | null) | Occasion;
  occasionConfidence?: ('1' | '2' | '3' | '4' | '5') | null;
  context?: string | null;
  remarks?: string | null;
  /**
   * Indicates whether the tag is not verified, just tagged, or has been verified by an admin.
   */
  status: 'Not Verified' | 'Tagged' | 'Verified';
  createdBy: string | User;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "albums".
 */
export interface Album {
  id: string;
  name: string;
  slug?: string | null;
  shortDescription?: string | null;
  images: (string | Media)[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "comments".
 */
export interface Comment {
  id: string;
  commentText: string;
  commentBy: string | User;
  image: string | Media;
  createdAt: string;
  commentUpvotes: number;
  commentDownvotes: number;
  /**
   * The current user's vote on this comment
   */
  userVote?: ('upvote' | 'downvote') | null;
  /**
   * If this is a reply, link to the parent comment
   */
  parentComment?: {
    relationTo: 'comments';
    value: string | Comment;
  } | null;
  /**
   * Depth of the comment in the reply tree (0 for top-level comments)
   */
  depth: number;
  updatedAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'occasions';
        value: string | Occasion;
      } | null)
    | ({
        relationTo: 'locations';
        value: string | Location;
      } | null)
    | ({
        relationTo: 'persons';
        value: string | Person;
      } | null)
    | ({
        relationTo: 'image-tags';
        value: string | ImageTag;
      } | null)
    | ({
        relationTo: 'albums';
        value: string | Album;
      } | null)
    | ({
        relationTo: 'comments';
        value: string | Comment;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  displayName?: T;
  role?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  mediaId?: T;
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        card?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "occasions_select".
 */
export interface OccasionsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  shortDescription?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "locations_select".
 */
export interface LocationsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  shortDescription?: T;
  city?: T;
  state?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "persons_select".
 */
export interface PersonsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  shortDescription?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "image-tags_select".
 */
export interface ImageTagsSelect<T extends boolean = true> {
  whenType?: T;
  whenValue?: T;
  whenValueConfidence?: T;
  mediaId?: T;
  personTags?:
    | T
    | {
        personId?: T;
        confidence?: T;
        coordinates?:
          | T
          | {
              x?: T;
              y?: T;
            };
        createdBy?: T;
        id?: T;
      };
  location?: T;
  locationConfidence?: T;
  occasion?: T;
  occasionConfidence?: T;
  context?: T;
  remarks?: T;
  status?: T;
  createdBy?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "albums_select".
 */
export interface AlbumsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  shortDescription?: T;
  images?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "comments_select".
 */
export interface CommentsSelect<T extends boolean = true> {
  commentText?: T;
  commentBy?: T;
  image?: T;
  createdAt?: T;
  commentUpvotes?: T;
  commentDownvotes?: T;
  userVote?: T;
  parentComment?: T;
  depth?: T;
  updatedAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}